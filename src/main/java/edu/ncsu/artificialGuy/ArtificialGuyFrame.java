/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ncsu.artificialGuy;
//I:\JavaQuestionAnswer\artificial-guy-master
import edu.stanford.nlp.semgraph.SemanticGraph;
import edu.stanford.nlp.semgraph.SemanticGraphEdge;
import java.io.File;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.util.List;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;

/**
 *
 * @author DOPHUC
 */
public class ArtificialGuyFrame extends javax.swing.JFrame {

    /**
     * Creates new form ArtificialGuyFrame
     */
    String Neo4jFolder="D:\\AI_software\\artificial-guy-master\\Neo4jStore3";
    KnowledgeGraph kr = null; 
    // to perform any NLP operations required
    NLP nlp = NLP.getInstance();
    
    public ArtificialGuyFrame() {
        initComponents();
       
    }
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        ButtonStop = new javax.swing.JButton();
        ButtonBuildKB = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        TextArea1 = new java.awt.TextArea();
        ButtonRun = new javax.swing.JButton();
        TextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AI bot: Question&Answer Bot developed by TriNhan R&D Group, 2019");
        setLocation(new java.awt.Point(100, 100));

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 51)));

        jLabel1.setIcon(new javax.swing.ImageIcon("D:\\AI_Software\\artificial-guy-master\\TriNhanIcon.gif")); // NOI18N
        jLabel1.setText("Picture");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51)));

        ButtonStop.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ButtonStop.setText("Stop");
        ButtonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonStopActionPerformed(evt);
            }
        });

        ButtonBuildKB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ButtonBuildKB.setText("Build KB");
        ButtonBuildKB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonBuildKBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ButtonBuildKB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ButtonStop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(ButtonBuildKB, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(ButtonStop, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(TextArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 632, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TextArea1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        ButtonRun.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ButtonRun.setText("Send");
        ButtonRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonRunActionPerformed(evt);
            }
        });

        TextField1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        TextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextField1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Enter the question:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(TextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 529, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ButtonRun, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(TextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ButtonRun))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonStopActionPerformed
        // TODO add your handling code here:
        // terminate before exit
	kr.terminate();
        System.exit(0);
    }//GEN-LAST:event_ButtonStopActionPerformed

    private void ButtonBuildKBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonBuildKBActionPerformed
        // TODO add your handling code here:
        ///
         JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        jfc.setDialogTitle("Select file ");
        jfc.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text File", "txt");
        jfc.addChoosableFileFilter(filter);

        int returnValue = jfc.showOpenDialog(null);
        System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	System.out.println("                                  Artificial Guy");
	System.out.println("Parses a story using Stanford CoreNLP and builds a knowledge graph using Neo4J");
	System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
        
        TextArea1.append("\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
        TextArea1.append("\n                                  Artificial Guy");
        TextArea1.append("\nParses a story using Stanford CoreNLP and builds a knowledge graph using Neo4J\n");
        TextArea1.append("\n~Folder= D:\\AI_software\\artificial-guy-master\\input\\story.txt~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
        TextArea1.append("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
         
        if (returnValue == JFileChooser.APPROVE_OPTION)
        {      
        // args[0]- filestory
        System.out.println(jfc.getSelectedFile().getPath());
        String filename=jfc.getSelectedFile().getPath();                
        File file = new File (filename);
//        String fileStory="story.txt";
//	System.out.println("Using story file : " + fileStory);
//	Path path = FileSystems.getDefault().getPath("D:\\AI_software\\artificial-guy-master\\input\\",fileStory );
//	File file = path.toFile();

		// build a Story object
	Story story = new Story(file);

		// display the original story
	System.out.println("\n######################## ORIGINAL STORY ##########################");
        TextArea1.append("\n\n--------------------------- ORIGINAL STORY ------------------------");
	System.out.println(story.getText().replace(". ", ".\n"));
        TextArea1.append("\n"+story.getText().replace(". ", ".\n"));
	System.out.println("-------------------------------------------------------------\n");
        TextArea1.append("\n--------------------------------ORIGINAL STORY ---------------------------");

		// to perform any NLP operations required
	NLP nlp = NLP.getInstance();
		
	// resolve co reference
	String coRefText = nlp.resolveCoRef(story.getText());

	// story after co reference resolution
	System.out.println("\n################# AFTER COREFERENCE RESOLUTION ###################");
        TextArea1.append("\n----------------------------- AFTER COREFERENCE RESOLUTION ---------------------");
	System.out.println(coRefText.replace(". ", ".\n"));
	System.out.println("##################################################################\n");
        TextArea1.append("\n----------------------------------------------------\n");
	
	kr = new KnowledgeGraph(Neo4jFolder);
        TextArea1.append("\n Neo4j db path="+Neo4jFolder);
	// relationships to be added to KR
	List<SemanticGraph> depGraphs = nlp.getDependencies(coRefText);

	System.out.println("\n################## ADDING RELATIONSHIPS TO KR ####################");
        TextArea1.append("\n---------------------------ADDING RELATIONSHIPS TO KR ------------------");
	// add relationships and nodes to KR
	int numEdges = 0;
	int sentId = 0;
	for (SemanticGraph depGraph : depGraphs) {
			Iterable<SemanticGraphEdge> edges = depGraph.edgeIterable();
			for (SemanticGraphEdge edge : edges) {
				String srcToken = edge.getSource().lemma();
				String dstToken = edge.getTarget().lemma();
				String srcPos = edge.getSource().tag();
				String dstPos = edge.getTarget().tag();
				String srcNer = edge.getSource().ner();
				String dstNer = edge.getTarget().ner();
				String reln = edge.getRelation().getShortName();
				
				// TODO : figure out which POS make a node
				// all types of nouns, verbs, adjectives, adverbs
				if (srcPos.matches("(NN|VB|JJ|RB).*") && dstPos.matches("(NN|VB|JJ|RB).*")) {
					boolean status = false;
					status = kr.addRelation(srcToken, srcPos, srcNer, dstToken, dstPos, dstNer, reln, Integer.toString(sentId));
                                       // System.out.println("<"+srcToken+"-"+reln+"-"+dstToken+">");
					if (status == false) {
						System.out.println("Failed to add relation - " + srcToken + "(" + srcPos + ")" + " -" + reln
								+ "-> " + dstToken + "(" + dstPos + ")");
					} else {
						System.out.println(srcToken + "(" + srcPos + ")" + " -" + reln
								+ "-> " + dstToken + "(" + dstPos + ")");
						numEdges++;
					}
				}
			}
			sentId++;
		}
		
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SUMMARY ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Number of relationships added : " + numEdges);
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
                TextArea1.append("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SUMMARY ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		TextArea1.append("\nNumber of relationships added : " + numEdges);
		TextArea1.append("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
                
        } // if jfilechooser
        else {
            TextArea1.append("\n==Not chosen file===\n");
        }
        TextArea1.append("\n Done ");
        ////
    }//GEN-LAST:event_ButtonBuildKBActionPerformed

    private void ButtonRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRunActionPerformed
        // Hoi dap TODO add your handling code here:
        // question answering session
		String question = TextField1.getText().trim();
		if (question.equals("quit")|| question.length()==0) {
                    TextArea1.append("quit");
			return;
                }
                TextField1.setText("");
		// parse the question
		List<SemanticGraph> qDepGraphs = nlp.getDependencies(question);
		// Phuc them
                
		// is the question too complex to answer?
		if (qDepGraphs.size() > 1) {
			System.out.println("*** I don't know");
                        TextArea1.append("\n** I don't know");
                        return;
                }
                TextArea1.append("\n =====Q&A===========\n");
	        TextArea1.append("\n Question="+question +"\n");
                System.out.println("Question="+question);
		System.out.println("*** Answer your question ");
                TextArea1.append("\n"+"*** Answer your question ");
		// parts of the parsed question
		String verb = null;
		String subj = null;
		String obj = null;
		String questWord = null;
		String questReln = null;
		
		// extract subj, verb, obj triplet from question
		// and also the question word
		SemanticGraph qDepGraph = qDepGraphs.get(0);
			
		// root verb
		if (qDepGraph.getFirstRoot().tag().startsWith("VB")) {
			if (!qDepGraph.getFirstRoot().lemma().matches("(be|do|have)")) {
				verb = qDepGraph.getFirstRoot().lemma();
			}
		}
			
		Iterable<SemanticGraphEdge> edges = qDepGraph.edgeIterable();
                
		for (SemanticGraphEdge edge : edges) {
                    String srcToken = edge.getSource().lemma();
		    String dstToken = edge.getTarget().lemma();
		    String srcPos = edge.getSource().tag();
		    String dstPos = edge.getTarget().tag();
		    String reln = edge.getRelation().getShortName();
				
		    // question word
                    //TextArea1.append("\n"+"*** Question word Phuc W ");
		    if (srcPos.startsWith("W")) {
			questWord = srcToken;
			questReln = reln;
		    } else if (dstPos.startsWith("W")) {
			questWord = dstToken;
			questReln = reln;
		}
				
		// subj and obj
		if (reln == "nsubj" && !dstPos.startsWith("W")) {
			subj = dstToken;
		 } else if (reln == "dobj" && !dstPos.startsWith("W")) {
			obj = dstToken;					
		    }
		}
			
		// check if question word exists
		if (questWord != null) {
                         System.out.println("*** Is this a question?");
                         TextArea1.append("\n** Is this a question?");                     		
			
			// ask the KR is knowledge graph public variable
			// TODO : there has to be a cleaner way to do this
			List<String> answer = null;
			if (verb == null) {
				if (obj == null && questReln.equals("advmod")) {
					answer = kr.getDesc(subj);
				}
			} else {
				if (subj == null && obj == null) {
					answer = kr.getSubj(verb);
				} else if (obj == null) {
					answer = kr.getObj(subj, verb);
				} else if (subj == null) {
					answer = kr.getSubj(verb, obj);	
				}
			}
			
			if (answer == null) {
				System.out.println("*** I don't know");	
                                TextArea1.append("\n*** I don't know");	
			} else {
				System.out.println("*** Answer > " + answer);                                
                                TextArea1.append("\n Question="+question +"\n");
                                TextArea1.append("\n*** Answer=" + answer);	
			}		

		// terminate before exit
		// kr.terminate();
		
		// time to say bye
		System.out.println("\nTo visualize the knowledge graph :");
		System.out.println("		./neo4j console");
		System.out.println("		http://localhost:7474/");
		System.out.println("\nYour friendly bot, artificial-guy\n"); 
            }
    }//GEN-LAST:event_ButtonRunActionPerformed

    private void TextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextField1ActionPerformed
        // TODO add your handling code here:
                String question = TextField1.getText().trim();
		if (question.equals("quit")|| question.length()==0) {
                    TextArea1.append("quit");
			return;
                }
                TextField1.setText("");
		// parse the question
		List<SemanticGraph> qDepGraphs = nlp.getDependencies(question);
		// Phuc them
                
                System.out.print(qDepGraphs.toString());
                
		// is the question too complex to answer?
		if (qDepGraphs.size() > 1) {
			System.out.println("*** I don't know");
                        TextArea1.append("\n** I don't know");
                        return;
                }
                TextArea1.append("\n =====Q&A===========\n");
	        TextArea1.append("\n Question="+question +"\n");	
                System.out.println("Question="+question);
		System.out.println("*** Answer your question ");
                TextArea1.append("\n"+"*** Answer your question ");
		// parts of the parsed question
		String verb = null;
		String subj = null;
		String obj = null;
		String questWord = null;
		String questReln = null;
		
		// extract subj, verb, obj triplet from question
		// and also the question word
		SemanticGraph qDepGraph = qDepGraphs.get(0);
			
		// root verb
		if (qDepGraph.getFirstRoot().tag().startsWith("VB")) {
			if (!qDepGraph.getFirstRoot().lemma().matches("(be|do|have)")) {
				verb = qDepGraph.getFirstRoot().lemma();
			}
		}
			
		Iterable<SemanticGraphEdge> edges = qDepGraph.edgeIterable();
		for (SemanticGraphEdge edge : edges) {
                    String srcToken = edge.getSource().lemma();
		    String dstToken = edge.getTarget().lemma();
		    String srcPos = edge.getSource().tag();
		    String dstPos = edge.getTarget().tag();
		    String reln = edge.getRelation().getShortName();
                    System.out.println("Query Cypher");
                    System.out.println(srcToken+"="+reln+"="+dstToken);                            
				
		    // question word
		    if (srcPos.startsWith("W")) {
			questWord = srcToken;
			questReln = reln;
		    } else if (dstPos.startsWith("W")) {
			questWord = dstToken;
			questReln = reln;
		}
				
		// subj and obj
		if (reln == "nsubj" && !dstPos.startsWith("W")) {
			subj = dstToken;
		 } else if (reln == "dobj" && !dstPos.startsWith("W")) {
			obj = dstToken;					
		    }
		}
			
		// check if question word exists
		if (questWord != null) {
                         System.out.println("*** Is this a question?");
                         TextArea1.append("\n** Is this a question?");                     		
			
			// ask the KR is knowledge graph public variable
			// TODO : there has to be a cleaner way to do this
			List<String> answer = null;
			if (verb == null) {
				if (obj == null && questReln.equals("advmod")) {
					answer = kr.getDesc(subj);
				}
			} else {
				if (subj == null && obj == null) {
					answer = kr.getSubj(verb);
				} else if (obj == null) {
					answer = kr.getObj(subj, verb);
				} else if (subj == null) {
					answer = kr.getSubj(verb, obj);	
				}
			}
			
			if (answer == null) {
				System.out.println("*** I don't know");	
                                TextArea1.append("\n*** I don't know");	
			} else {
				System.out.println("*** Answer > " + answer);
                                TextArea1.append("\n Question="+question +"\n");
                                TextArea1.append("\n*** Answer=" + answer);	
			}		

		// terminate before exit
		// kr.terminate();
		
		// time to say bye
		System.out.println("\nTo visualize the knowledge graph :");
		System.out.println("		./neo4j console");
		System.out.println("		http://localhost:7474/");
		System.out.println("\nYour friendly bot, artificial-guy\n"); 
            }
    }//GEN-LAST:event_TextField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ArtificialGuyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ArtificialGuyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ArtificialGuyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ArtificialGuyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ArtificialGuyFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonBuildKB;
    private javax.swing.JButton ButtonRun;
    private javax.swing.JButton ButtonStop;
    private java.awt.TextArea TextArea1;
    private javax.swing.JTextField TextField1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
}
